{"version":3,"sources":["Result.js","ResultsTable.js","WebWorker.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Result","state","currentComplex","CORUM","find","e","props","index","newProps","this","setState","classes","Paper","className","root","Grid","container","spacing","item","xs","Typography","variant","split","length","href","target","smallIcon","reduce","previous","current","hit","search_item","substr","match","React","Component","withStyles","theme","padding","fontSize","LocationTable","data","splice","map","key","id","WebWorker","worker","code","blob","Blob","type","Worker","URL","createObjectURL","dataGenerator","addEventListener","event","message","Object","keys","forEach","postMessage","finder","subscribeToFinerWoker","callback","assessQuery","query","accession_matches","protein_name_matches","gene_matches","complex_matches","funcat_matches","App","getResults","results","filterResults","onInputChange","value","search","TextField","textField","onChange","margin","md","xl","ResultsTable","attribution","rel","Date","version","toLocaleDateString","textAlign","marginTop","maxWidth","paddingLeft","paddingRight","width","Boolean","window","location","hostname","createMuiTheme","palette","primary","main","secondary","error","red","A400","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fa25325.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Typography, Grid, Paper} from \"@material-ui/core\";\nimport CORUM from './data/allComplexes';\nimport OpenInNew from '@material-ui/icons/OpenInNew';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(1)\n    },\n    smallIcon: {\n        fontSize: \"1em\"\n    }\n});\n\nclass Result extends React.Component {\n    state = {\n        currentComplex: CORUM.find(e => e['ComplexID'] === this.props.index)\n    };\n\n    componentWillReceiveProps(newProps) {\n        this.setState({\n            currentComplex: CORUM.find(e => e['ComplexID'] === newProps.index)\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Paper className={classes.root}>\n                <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                        <Typography variant={\"body1\"}>\n                                {this.state.currentComplex['ComplexName']}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={8}>\n                        <Typography variant={\"caption\"}>\n                            {this.state.currentComplex['Complex comment']}\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <hr />\n                <Grid container>\n                    <Grid item xs={2}>\n                        <Typography variant={\"caption\"}>\n                            ID: {this.state.currentComplex['ComplexID']}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Typography variant={\"caption\"}>\n                            {this.state.currentComplex['Organism']}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Typography variant={\"caption\"}>\n                            Subunits: {this.state.currentComplex['subunits(UniProt IDs)'].split(';').length}\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={2}>\n                        <a\n                            href={\"http://mips.helmholtz-muenchen.de/corum/?complexID=\" + this.state.currentComplex['ComplexID']}\n                            target={\"_blank\"}\n                        >\n                            <Typography variant={\"caption\"}>\n                                CORUM\n                            </Typography>\n                            <OpenInNew className={classes.smallIcon} />\n                        </a>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <a\n                            href={this.state.currentComplex['subunits(UniProt IDs)'].split(';').reduce((previous, current) => previous + '&p=' + current,'https://cellmap.protein.properties/ppi?')}\n                            target={\"_blank\"}\n                        >\n                            <Typography variant={\"caption\"}>\n                                CellMap\n                            </Typography>\n                            <OpenInNew className={classes.smallIcon} />\n                        </a>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <a\n                            href={\"https://protein.melting.degree/complex?id=\" + this.state.currentComplex['ComplexID']}\n                            target={\"_blank\"}\n                        >\n                            <Typography variant={\"caption\"}>\n                                PMDB\n                            </Typography>\n                            <OpenInNew className={classes.smallIcon} />\n                        </a>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={8} />\n                    <Grid item xs={4}>\n                        <Typography variant={\"caption\"}>\n                            Query matched by: {this.props.hit.search_item.substr(this.props.hit.match, 10)}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Paper>\n        );\n    }\n}\n\nResult.propTypes = {\n    classes: PropTypes.object.isRequired,\n    index: PropTypes.number.isRequired,\n    hit: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Result);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Grid} from \"@material-ui/core\";\nimport Result from \"./Result\";\n\nconst styles = theme => ({\n\n});\n\nclass LocationTable extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Grid container spacing={2} className={classes.root}>\n                {this.props.data.splice(0,3).map(e =>\n                    <Grid key={e.match + e.search_item + e.id} item xs={12}>\n                        <Result index={e.id} hit={e}/>\n                    </Grid>\n                )}\n            </Grid>\n        );\n    }\n}\n\nLocationTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n    data: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(LocationTable);","// From https://github.com/facebook/create-react-app/issues/1277#issuecomment-345516463\n\nexport default class WebWorker {\n    constructor(worker) {\n        // let code = worker.toString();\n        // code = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\n        //\n        // // When updating the code in the worker, uncomment the following to make sure the worker... works...\n        // console.log(code);\n\n        let code = '';\n\n        switch (worker) {\n            case 'DataGenerator':\n                code = `\n  var onmessage = function onmessage(e) {\n    // eslint-disable-line no-unused-vars\n    // Write your code here...\n    var _e$data = e.data,\n        type = _e$data.type,\n        CORUM = _e$data.CORUM;\n\n    switch (type) {\n      case 'uniprot_accessions':\n        postMessage({\n          type: type,\n          data: CORUM.map(e => e['subunits(UniProt IDs)'].split(';').map(accession => {\n            return {\n              search_item: accession.toLowerCase(),\n              id: e['ComplexID']\n            };\n          })).reduce((current, previous) => previous.concat(current), [])\n        });\n        break;\n\n      case 'gene_names':\n        postMessage({\n          type: type,\n          data: CORUM.map(e => e['subunits(Gene name)'].split(';').map(gene => {\n            return {\n              search_item: gene.toLowerCase(),\n              id: e['ComplexID']\n            };\n          })).reduce((current, previous) => previous.concat(current), [])\n        });\n        break;\n\n      case 'protein_names':\n        postMessage({\n          type: type,\n          data: CORUM.map(e => e['subunits(Protein name)'].split(';').map(protein_name => {\n            return {\n              search_item: protein_name.toLowerCase(),\n              id: e['ComplexID']\n            };\n          })).reduce((current, previous) => previous.concat(current), [])\n        });\n        break;\n\n      case 'funcat_descriptions':\n        postMessage({\n          type: type,\n          data: CORUM.filter(e => e['FunCat description'] !== null).map(e => e['FunCat description'].split(';').map(funcat_description => {\n            return {\n              search_item: funcat_description.toLowerCase(),\n              id: e['ComplexID']\n            };\n          })).reduce((current, previous) => previous.concat(current), [])\n        });\n        break;\n\n      case 'complex_name':\n        postMessage({\n          type: type,\n          data: CORUM.map(e => {\n            return {\n              search_item: e['ComplexName'].toLowerCase(),\n              id: e['ComplexID']\n            };\n          })\n        });\n        break;\n\n      case 'complex_comment':\n        postMessage({\n          type: type,\n          data: CORUM.filter(e => e['Complex comment'] !== null).map(e => {\n            return {\n              search_item: e['Complex comment'].toLowerCase(),\n              id: e['ComplexID']\n            };\n          })\n        });\n        break;\n    }\n  };\n                `;\n                break;\n            case 'Finder':\n                code = `\nvar onmessage = function onmessage(e) {\n    const _e$data = e.data,\n          data = _e$data.data,\n          query = _e$data.query;\n\n    const filterQuery = (query, search_array) => {\n      query = query.toLowerCase();\n      return search_array.map(element => {\n        element['match'] = element.search_item.indexOf(query);\n        return element;\n      }).filter(element => element.match > -1);\n    };\n\n    postMessage({\n      query: query,\n      accession_matches: filterQuery(query, data.uniprot_accessions),\n      protein_name_matches: filterQuery(query, data.protein_names),\n      gene_matches: filterQuery(query, data.gene_names),\n      complex_matches: [...filterQuery(query, data.complex_name), ...filterQuery(query, data.complex_comment)],\n      funcat_matches: filterQuery(query, data.funcat_descriptions)\n    });\n  };\n                `;\n                break;\n            default:\n        }\n\n        const blob = new Blob([code], { type: \"application/javascript\" });\n        return new Worker(URL.createObjectURL(blob));\n    }\n}","import CORUM from './data/allComplexes';\nimport WebWorker from './WebWorker';\n\nconst dataGenerator = new WebWorker('DataGenerator');\n\nlet data = {\n    'uniprot_accessions':[],\n    'gene_names':[],\n    'complex_name':[],\n    'complex_comment':[],\n    'protein_names':[],\n    'funcat_descriptions':[]\n};\n\nconst _handleDataGenerator = (event) => {\n    const message = event.data;\n    const type = message.type;\n\n    data[type] = message.data;\n};\n\ndataGenerator.addEventListener(\"message\", _handleDataGenerator, false);\n\nObject.keys(data).forEach(e => dataGenerator.postMessage({\n    type: e,\n    CORUM: CORUM\n}));\n\nconst finder = new WebWorker('Finder');\n\nexport const subscribeToFinerWoker = (callback) => {\n    finder.addEventListener(\"message\", callback, false);\n};\n\nexport const assessQuery = (query) => {\n    finder.postMessage({\n        data: data,\n        query: query\n    });\n\n    return {\n        query: query,\n        accession_matches: [],\n        protein_name_matches: [],\n        gene_matches: [],\n        complex_matches: [],\n        funcat_matches: []\n    }\n};","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResultsTable from './ResultsTable';\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Grid from '@material-ui/core/Grid';\nimport {subscribeToFinerWoker, assessQuery} from './utils';\nimport * as version from './version';\n\nconst styles = theme => ({\n    attribution: {\n        textAlign: \"center\",\n        marginTop: theme.spacing(2)\n    },\n    root: {\n        maxWidth: 1100,\n        margin: \"auto\",\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n\n    },\n    search: {\n        width: \"100%\"\n    },\n    textField: {\n        width: \"100%\",\n        textAlign: \"center\"\n    }\n});\n\nclass App extends React.Component {\n    state = {\n        query: '',\n        accession_matches: null,\n        protein_name_matches: null,\n        gene_matches: null,\n        complex_matches: null,\n        funcat_matches: null\n    };\n\n    constructor(){\n        super();\n\n        subscribeToFinerWoker(this.getResults);\n    }\n\n    getResults = (event) => {\n        const results = event.data;\n\n        let {\n            accession_matches,\n            protein_name_matches,\n            gene_matches,\n            complex_matches,\n            funcat_matches\n        } = results;\n\n        this.setState({\n            accession_matches,\n            protein_name_matches,\n            gene_matches,\n            complex_matches,\n            funcat_matches\n        });\n    };\n\n    filterResults = () => {\n        assessQuery(this.state.query);\n    };\n\n    onInputChange = (query) => {\n        this.setState({query: query.target.value}, this.filterResults);\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Grid container className={classes.root} spacing={1}>\n                <Grid item xs={3} />\n                <Grid item className={classes.search} xs={6}>\n                    <TextField\n                        id=\"query\"\n                        className={classes.textField}\n                        value={this.state.query}\n                        onChange={this.onInputChange}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                    <Typography variant={\"caption\"}>\n                        Type above to search by gene or protein id, or keyword.\n                    </Typography>\n                </Grid>\n                <Grid item xs={3} />\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12} md={8} xl={8}>\n                    {this.state.complex_matches && <ResultsTable data={this.state.complex_matches} />}\n                </Grid>\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12} md={8} xl={8}>\n                    {this.state.gene_matches && <ResultsTable data={this.state.gene_matches} />}\n                </Grid>\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12} md={8} xl={8}>\n                    {this.state.accession_matches && <ResultsTable data={this.state.accession_matches} />}\n                </Grid>\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12} md={8} xl={8}>\n                    {this.state.funcat_matches && <ResultsTable data={this.state.funcat_matches} />}\n                </Grid>\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12} md={8} xl={8}>\n                    {this.state.protein_name_matches && <ResultsTable data={this.state.protein_name_matches} />}\n                </Grid>\n                <Grid item xs={false} md={2} xl={2} />\n                <Grid item className={classes.search} xs={12}>\n                    <Typography variant={\"caption\"} className={classes.attribution}>\n                        Made by <a rel=\"noopener noreferrer\" href=\"https://christian.dallago.us\" target=\"_blank\">Christian Dallago</a>.\n                    </Typography>\n                </Grid>\n                <Grid item className={classes.search} xs={12}>\n                    <Typography variant={\"caption\"} className={classes.attribution}>\n                        This webpage is an interface to <a rel=\"noopener noreferrer\" href=\"https://mips.helmholtz-muenchen.de/corum/\" target=\"_blank\">CORUM</a>. Please, cite CORUM when using any of this data for your work.\n                    </Typography>\n                </Grid>\n                <Grid item className={classes.search} xs={12}>\n                    <Typography variant={\"caption\"} className={classes.attribution}>\n                        Released on {(new Date(version.release)).toLocaleDateString(\"it-IT\")}, version {version.version + 'R' + version.releaseVersion}\n                    </Typography>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { red } from '@material-ui/core/colors';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        }\n    },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n    </ThemeProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}